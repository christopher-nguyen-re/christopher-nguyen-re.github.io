"use strict";(self.webpackChunkchristopher_nguyen_re=self.webpackChunkchristopher_nguyen_re||[]).push([[6555],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),f=c(n),h=a,d=f["".concat(s,".").concat(h)]||f[h]||p[h]||o;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9796:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={slug:"stonks",title:"Stonks",authors:["nguyen"],tags:["CTF","Binary Exploitation","Pico CTF"]},i=void 0,l={permalink:"/blog/stonks",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-02-14-stonks.md",source:"@site/blog/2022-02-14-stonks.md",title:"Stonks",description:"Pico CTF: Stonks",date:"2022-02-14T00:00:00.000Z",formattedDate:"February 14, 2022",tags:[{label:"CTF",permalink:"/blog/tags/ctf"},{label:"Binary Exploitation",permalink:"/blog/tags/binary-exploitation"},{label:"Pico CTF",permalink:"/blog/tags/pico-ctf"}],readingTime:1.97,truncated:!0,authors:[{name:"Christopher Nguyen",title:"Reverse Engineer",url:"https://github.com/christopher-nguyen-re",imageURL:"https://cdn.cnn.com/cnnnext/dam/assets/190517103414-01-grumpy-cat-file-restricted.jpg",key:"nguyen"}],frontMatter:{slug:"stonks",title:"Stonks",authors:["nguyen"],tags:["CTF","Binary Exploitation","Pico CTF"]},prevItem:{title:"baby-c",permalink:"/blog/baby-c"},nextItem:{title:"Hidden Flag Function",permalink:"/blog/hidden_flag_function"}},s={authorsImageUrls:[void 0]},c=[{value:"The Challenge",id:"the-challenge",level:2},{value:"Analysis",id:"analysis",level:2}],u={toc:c};function p(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Pico CTF: Stonks"),(0,a.kt)("h2",{id:"the-challenge"},"The Challenge"),(0,a.kt)("p",null,"This challenge can be found ",(0,a.kt)("a",{parentName:"p",href:"https://play.picoctf.org/practice/challenge/105?bookmarked=0&page=1&search=stonks"},"here"),"."),(0,a.kt)("p",null,"The provided source file ",(0,a.kt)("a",{target:"_blank",href:n(8122).Z},"here"),"\nGiven an application, the goal is to find the flag."),(0,a.kt)("h2",{id:"analysis"},"Analysis"),(0,a.kt)("p",null,"I first looked through the source file to get an idea of where the flag could be stored within the program. In main, the buy_stonks function opens a file and stores the flag into api_buf. The location of api_buf on the stack would be a point of interest."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'int buy_stonks(Portfolio *p) {\n    if (!p) {\n        return 1;\n    }\n    char api_buf[FLAG_BUFFER];\n    FILE *f = fopen("api","r");\n    if (!f) {\n        printf("Flag file not found. Contact an admin.\\n");\n        exit(1);\n    }\n    fgets(api_buf, FLAG_BUFFER, f);\n\n    int money = p->money;\n    int shares = 0;\n    Stonk *temp = NULL;\n    printf("Using patented AI algorithms to buy stonks\\n");\n    while (money > 0) {\n        shares = (rand() % money) + 1;\n        temp = pick_symbol_with_AI(shares);\n        temp->next = p->head;\n        p->head = temp;\n        money -= shares;\n    }\n    printf("Stonks chosen\\n");\n\n    // TODO: Figure out how to read token from file, for now just ask\n\n    char *user_buf = malloc(300 + 1);\n    printf("What is your API token?\\n");\n    scanf("%300s", user_buf);\n    printf("Buying stonks with token:\\n");\n    printf(user_buf);\n\n    // TODO: Actually use key to interact with API\n\n    view_portfolio(p);\n\n    return 0;\n}\n')),(0,a.kt)("p",null,"There is a printf vulnerability where ",(0,a.kt)("inlineCode",{parentName:"p"},"printf(user_buf)")," is called. ",(0,a.kt)("inlineCode",{parentName:"p"},"scanf")," stores input from stdin into user_buf, allowing us to manipulate the format string interpreted by the printf function. Entering %x as input resulted in the following output."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"stonks %x output",src:n(4896).Z,width:"451",height:"242"})),(0,a.kt)("p",null,"This worked because the x86 calling convention retrieves parameters requested in the format string from the stack. The ",(0,a.kt)("inlineCode",{parentName:"p"},"printf")," function cannot determine a mismatch between the format string and the number of arguments provided in the ",(0,a.kt)("inlineCode",{parentName:"p"},"printf")," function. The function does not have a marked boundary so it will fetch data that does not belong to the function call."),(0,a.kt)("p",null,"The output turned out to be an address on the stack. The location of api_buf was further up the stack so I hand jammed a lot of %x's into user_buf to try and find api_buf. Looking through the various data on the stack, I notice 6f636970. The converted output from hex to ascii resulted in 'ocip' which meant that the machine was little endian. I read all the data from 'ocip' until a null byte and obtained the flag. The exact offset was 56 bytes away from user_buf. The full flag was 'picoCTF{I_l05t_4ll_my_m0n3y_c7cb6cae}'."))}p.isMDXComponent=!0},8122:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/files/vuln-cf434296ffbb139691a6800cf249b9ff.c"},4896:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/stonks_percent_x-b4fb3363928cbaf82eda55a94d1d7467.png"}}]);